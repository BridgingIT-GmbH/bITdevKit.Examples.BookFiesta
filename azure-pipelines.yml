variables:
  - name: solution
    value: "**/*.sln"
  - name: buildConfiguration
    value: 'Release'

trigger:
  tags:
    include:
      - '*'
  batch: 'true'
  branches:
    include:
      - main
      - features/*
  paths:
    exclude:
      - README.md
pr:
  autoCancel: 'true'
  branches:
    include:
      - main
resources:
  - repo: self
    fetchDepth: '0'

#######################################################################################################
# VERSION
#
# This stage is responsible for versioning the build with MinVer.
#
stages:
  - stage: version
    displayName: Version stage
    jobs:
      - job: version
        displayName: Version
        variables:
          MinVerDefaultPreReleaseIdentifiers: preview.0
          # MinVerBuildMetadata: $(Build.SourceVersion) # use git commit hash in version
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: '0'

          # Use .NET SDK
          - task: UseDotNet@2
            displayName: Use .NET SDK
            condition: succeeded()
            inputs:
              version: '8.0.x'
              performMultiLevelLookup: true
              includePreviewVersions: false

          # Inspect environment variables and .NET SDK details
          - bash: |
              export ASPNETCORE_ENVIRONMENT=Development
              whereis dotnet
              /usr/bin/dotnet --info
            displayName: Inspect environment
            condition: succeeded()

          # Install MinVer CLI for managing versions
          - task: DotNetCoreCLI@2
            displayName: 'Install version tool'
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install --global minver-cli --version 4.3.0'

          # Calculate version using MinVer
          - powershell: |
              $version = $(minver -v d) # https://github.com/adamralph/minver#options
              $buildName = "$version" # + "_" + $env:BUILD_SOURCEBRANCHNAME
              Write-Host "##vso[build.updatebuildnumber]$buildName"
              Write-Host "##vso[task.setvariable variable=BUILD_VERSION;isOutput=true]$buildName"
            displayName: Calculate version
            name: CalculateVersion

          # Show environment variables for debugging
          - powershell: |
              Get-ChildItem Env:
            displayName: Show environment variables

  #######################################################################################################
  # BUILD
  #
  # This stage is responsible for restoring, building, and testing the solution.
  #
  - stage: build
    displayName: Build stage
    dependsOn: [ version ]
    jobs:
      - job: build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
        steps:
          - checkout: self
            fetchDepth: '0'

          # Use .NET SDK
          - task: UseDotNet@2
            displayName: Use .NET SDK
            condition: succeeded()
            inputs:
              version: '8.0.x'
              performMultiLevelLookup: true
              includePreviewVersions: false

          # Setup Aspire environment with necessary workloads
          - task: Bash@3
            displayName: Aspire setup environment
            continueOnError: true
            inputs:
              targetType: 'inline'
              script: |
                dotnet workload update
                dotnet workload install aspire

          # Start necessary Docker containers
          - bash: |
              docker compose up -d
            displayName: Docker start containers

          # Inspect environment variables and .NET SDK details
          - bash: |
              export ASPNETCORE_ENVIRONMENT=Development
              whereis dotnet
              /usr/bin/dotnet --info
            displayName: Inspect environment
            condition: succeeded()

          # Restore .NET projects
          - task: DotNetCoreCLI@2
            displayName: Dotnet restore
            condition: succeeded()
            inputs:
              command: restore
              projects: '**/*.csproj'

          # Build .NET projects
          - task: DotNetCoreCLI@2
            displayName: Dotnet build
            condition: succeeded()
            inputs:
              command: build
              projects: "$(solution)"
              arguments: "--configuration $(buildConfiguration) --no-restore --nologo"

          # Perform vulnerability scan on NuGet packages
          - task: Bash@3
            displayName: Vulnerability scan (nuget)
            continueOnError: true
            inputs:
              targetType: 'inline'
              script: |
                dotnet list $(Build.SourcesDirectory)/BridgingIT.DevKit.sln package --vulnerable --include-transitive 2>&1 | tee build.log
                test `grep -cm 1 'has the following vulnerable packages' build.log` = 0

          # Start necessary Docker containers
          - bash: |
              docker compose up -d
            displayName: Docker start containers

          # List Docker containers for verification
          - bash: |
              docker ps -a
            displayName: Docker list containers
            condition: succeeded()

          # Run unit tests
          - task: DotNetCoreCLI@2
            displayName: Dotnet test (unit)
            condition: succeeded()
            inputs:
              command: test
              projects: "**/*[Tt]ests/*UnitTests.csproj"
              arguments: "--configuration $(buildConfiguration) --no-restore --no-build --nologo"

          # Run integration tests
          - task: DotNetCoreCLI@2
            displayName: Dotnet test (integration)
            condition: succeeded()
            inputs:
              command: test
              projects: "**/*[Tt]ests/*IntegrationTests.csproj"
              arguments: "--configuration $(buildConfiguration) --no-restore --no-build --nologo"

          # Clean up Docker containers and images
          - bash: |
              docker compose stop
              docker container stop $(docker container ls -aq)
              docker container rm $(docker container ls -aq)
            displayName: Docker cleanup
            condition: succeeded()
            continueOnError: true