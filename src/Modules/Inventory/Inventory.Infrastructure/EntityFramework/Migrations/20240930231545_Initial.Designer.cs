// <auto-generated />
using System;
using BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20240930231545_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("inventory")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastRestockedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("QuantityOnHand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("QuantityReserved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ReorderQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ReorderThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Sku")
                        .IsUnique();

                    b.ToTable("Stocks", "inventory");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.StockSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReserved")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("StockId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Sku");

                    b.ToTable("StockSnapshots", "inventory");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Infrastructure.TenantReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Tenants", "organization", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.OutboxDomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EventId");

                    b.HasIndex("ProcessedDate");

                    b.HasIndex("Type");

                    b.ToTable("__Outbox_DomainEvents", "inventory");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.StorageDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<string>("RowKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PartitionKey");

                    b.HasIndex("RowKey");

                    b.HasIndex("Type");

                    b.ToTable("__Storage_Documents", "inventory");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.Stock", b =>
                {
                    b.HasOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Infrastructure.TenantReference", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("BridgingIT.DevKit.Domain.Model.AuditState", "AuditState", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<bool?>("Deactivated")
                                .HasColumnType("bit");

                            b1.Property<string>("DeactivatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("DeactivatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeactivatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("DeactivatedReasons")
                                .HasMaxLength(8192)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("DeletedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeletedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("DeletedReason")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("UpdatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("UpdatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("UpdatedReasons")
                                .HasMaxLength(8192)
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StockId");

                            b1.ToTable("Stocks", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.StorageLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Aisle")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("LocationAisle");

                            b1.Property<string>("Bin")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("LocationBin");

                            b1.Property<string>("Full")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)")
                                .HasColumnName("LocationFull");

                            b1.Property<string>("Shelf")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("LocationShelf");

                            b1.HasKey("StockId");

                            b1.HasIndex("Full");

                            b1.ToTable("Stocks", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Money", "UnitCost", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(5,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("UnitCost");

                            b1.HasKey("StockId");

                            b1.ToTable("Stocks", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockId");

                            b1.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("MoneyStockId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(8)
                                        .HasColumnType("nvarchar(8)")
                                        .HasDefaultValue("USD")
                                        .HasColumnName("UnitCostCurrency");

                                    b2.HasKey("MoneyStockId");

                                    b2.ToTable("Stocks", "inventory");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyStockId");
                                });

                            b1.Navigation("Currency");
                        });

                    b.OwnsMany("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.StockAdjustment", "Adjustments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("QuantityChange")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("Id", "StockId");

                            b1.HasIndex("StockId");

                            b1.ToTable("StockAdjustments", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockId");

                            b1.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Money", "NewUnitCost", b2 =>
                                {
                                    b2.Property<Guid>("StockAdjustmentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("StockAdjustmentStockId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("decimal(5,2)")
                                        .HasDefaultValue(0m)
                                        .HasColumnName("NewUnitCost");

                                    b2.HasKey("StockAdjustmentId", "StockAdjustmentStockId");

                                    b2.ToTable("StockAdjustments", "inventory");

                                    b2.WithOwner()
                                        .HasForeignKey("StockAdjustmentId", "StockAdjustmentStockId");

                                    b2.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Currency", "Currency", b3 =>
                                        {
                                            b3.Property<Guid>("MoneyStockAdjustmentId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<Guid>("MoneyStockAdjustmentStockId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("Code")
                                                .IsRequired()
                                                .ValueGeneratedOnAdd()
                                                .HasMaxLength(8)
                                                .HasColumnType("nvarchar(8)")
                                                .HasDefaultValue("USD")
                                                .HasColumnName("NewUnitCostCurrency");

                                            b3.HasKey("MoneyStockAdjustmentId", "MoneyStockAdjustmentStockId");

                                            b3.ToTable("StockAdjustments", "inventory");

                                            b3.WithOwner()
                                                .HasForeignKey("MoneyStockAdjustmentId", "MoneyStockAdjustmentStockId");
                                        });

                                    b2.Navigation("Currency");
                                });

                            b1.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Money", "OldUnitCost", b2 =>
                                {
                                    b2.Property<Guid>("StockAdjustmentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("StockAdjustmentStockId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("decimal(5,2)")
                                        .HasDefaultValue(0m)
                                        .HasColumnName("OldUnitCost");

                                    b2.HasKey("StockAdjustmentId", "StockAdjustmentStockId");

                                    b2.ToTable("StockAdjustments", "inventory");

                                    b2.WithOwner()
                                        .HasForeignKey("StockAdjustmentId", "StockAdjustmentStockId");

                                    b2.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Currency", "Currency", b3 =>
                                        {
                                            b3.Property<Guid>("MoneyStockAdjustmentId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<Guid>("MoneyStockAdjustmentStockId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("Code")
                                                .IsRequired()
                                                .ValueGeneratedOnAdd()
                                                .HasMaxLength(8)
                                                .HasColumnType("nvarchar(8)")
                                                .HasDefaultValue("USD")
                                                .HasColumnName("OldUnitCostCurrency");

                                            b3.HasKey("MoneyStockAdjustmentId", "MoneyStockAdjustmentStockId");

                                            b3.ToTable("StockAdjustments", "inventory");

                                            b3.WithOwner()
                                                .HasForeignKey("MoneyStockAdjustmentId", "MoneyStockAdjustmentStockId");
                                        });

                                    b2.Navigation("Currency");
                                });

                            b1.Navigation("NewUnitCost");

                            b1.Navigation("OldUnitCost");
                        });

                    b.OwnsMany("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.StockMovement", "Movements", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<string>("Reason")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("Id", "StockId");

                            b1.HasIndex("StockId");

                            b1.ToTable("StockMovements", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.Navigation("Adjustments");

                    b.Navigation("AuditState");

                    b.Navigation("Location");

                    b.Navigation("Movements");

                    b.Navigation("UnitCost");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.StockSnapshot", b =>
                {
                    b.HasOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.Stock", null)
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Infrastructure.TenantReference", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("BridgingIT.DevKit.Domain.Model.AuditState", "AuditState", b1 =>
                        {
                            b1.Property<Guid>("StockSnapshotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<bool?>("Deactivated")
                                .HasColumnType("bit");

                            b1.Property<string>("DeactivatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("DeactivatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeactivatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("DeactivatedReasons")
                                .HasMaxLength(8192)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("DeletedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeletedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("DeletedReason")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("UpdatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("UpdatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("UpdatedReasons")
                                .HasMaxLength(8192)
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StockSnapshotId");

                            b1.ToTable("StockSnapshots", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockSnapshotId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Inventory.Domain.StorageLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("StockSnapshotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Aisle")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LocationAisle");

                            b1.Property<string>("Bin")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LocationBin");

                            b1.Property<string>("Full")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Shelf")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LocationShelf");

                            b1.HasKey("StockSnapshotId");

                            b1.ToTable("StockSnapshots", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockSnapshotId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Money", "UnitCost", b1 =>
                        {
                            b1.Property<Guid>("StockSnapshotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(5,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("UnitCost");

                            b1.HasKey("StockSnapshotId");

                            b1.ToTable("StockSnapshots", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("StockSnapshotId");

                            b1.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("MoneyStockSnapshotId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasMaxLength(8)
                                        .HasColumnType("nvarchar(8)")
                                        .HasDefaultValue("USD")
                                        .HasColumnName("UnitCostCurrency");

                                    b2.HasKey("MoneyStockSnapshotId");

                                    b2.ToTable("StockSnapshots", "inventory");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyStockSnapshotId");
                                });

                            b1.Navigation("Currency");
                        });

                    b.Navigation("AuditState");

                    b.Navigation("Location");

                    b.Navigation("UnitCost");
                });
#pragma warning restore 612, 618
        }
    }
}
