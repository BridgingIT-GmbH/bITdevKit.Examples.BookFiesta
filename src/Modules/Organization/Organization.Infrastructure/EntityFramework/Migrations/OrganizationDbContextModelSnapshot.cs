// <auto-generated />
using System;
using BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(OrganizationDbContext))]
    partial class OrganizationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("organization")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Companies", "organization");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CompanyId");

                    b.ToTable("Tenants", "organization");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.TenantBranding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("TenantBrandings", "organization");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.OutboxDomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EventId");

                    b.HasIndex("ProcessedDate");

                    b.HasIndex("Type");

                    b.ToTable("__Outbox_DomainEvents", "organization");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("ProcessedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("MessageId");

                    b.HasIndex("ProcessedDate");

                    b.HasIndex("Type");

                    b.ToTable("__Outbox_Messages", "organization");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Infrastructure.EntityFramework.StorageDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PartitionKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Properties");

                    b.Property<string>("RowKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PartitionKey");

                    b.HasIndex("RowKey");

                    b.HasIndex("Type");

                    b.ToTable("__Storage_Documents", "organization");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Company", b =>
                {
                    b.OwnsOne("BridgingIT.DevKit.Domain.Model.AuditState", "AuditState", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<bool?>("Deactivated")
                                .HasColumnType("bit");

                            b1.Property<string>("DeactivatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("DeactivatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeactivatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("DeactivatedReasons")
                                .HasMaxLength(8192)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("DeletedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeletedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("DeletedReason")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTimeOffset?>("UpdatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("UpdatedDescription")
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<string>("UpdatedReasons")
                                .HasMaxLength(8192)
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "organization");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.EmailAddress", "ContactEmail", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("ContactEmail");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "organization");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Url", "Website", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)")
                                .HasColumnName("Website");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "organization");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("Line2")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "organization");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)");

                            b1.Property<string>("Number")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "organization");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.VatNumber", "VatNumber", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)");

                            b1.Property<string>("Number")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "organization");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("AuditState");

                    b.Navigation("ContactEmail")
                        .IsRequired();

                    b.Navigation("ContactPhone")
                        .IsRequired();

                    b.Navigation("VatNumber")
                        .IsRequired();

                    b.Navigation("Website")
                        .IsRequired();
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Tenant", b =>
                {
                    b.HasOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BridgingIT.DevKit.Domain.Model.AuditState", "AuditState", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deactivated")
                                .HasColumnType("bit");

                            b1.Property<string>("DeactivatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("DeactivatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeactivatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeactivatedReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("DeletedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeletedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeletedReason")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("UpdatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("UpdatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UpdatedReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants", "organization");

                            b1.ToJson("AuditState");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.EmailAddress", "ContactEmail", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("ContactEmail");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants", "organization");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsMany("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.TenantSubscription", "Subscriptions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("BillingCycle")
                                .HasColumnType("int");

                            b1.Property<int>("PlanType")
                                .HasColumnType("int");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Version")
                                .IsConcurrencyToken()
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("Id"), false);

                            b1.HasIndex("TenantId");

                            b1.ToTable("TenantSubscriptions", "organization");

                            b1.WithOwner("Tenant")
                                .HasForeignKey("TenantId");

                            b1.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Schedule", "Schedule", b2 =>
                                {
                                    b2.Property<Guid>("TenantSubscriptionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateOnly?>("EndDate")
                                        .HasColumnType("date");

                                    b2.Property<DateOnly>("StartDate")
                                        .HasColumnType("date");

                                    b2.HasKey("TenantSubscriptionId");

                                    b2.ToTable("TenantSubscriptions", "organization");

                                    b2.WithOwner()
                                        .HasForeignKey("TenantSubscriptionId");
                                });

                            b1.Navigation("Schedule")
                                .IsRequired();

                            b1.Navigation("Tenant");
                        });

                    b.Navigation("AuditState");

                    b.Navigation("ContactEmail")
                        .IsRequired();

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.TenantBranding", b =>
                {
                    b.HasOne("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Tenant", null)
                        .WithOne("Branding")
                        .HasForeignKey("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.TenantBranding", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Url", "FaviconUrl", b1 =>
                        {
                            b1.Property<Guid>("TenantBrandingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)")
                                .HasColumnName("FaviconUrl");

                            b1.HasKey("TenantBrandingId");

                            b1.ToTable("TenantBrandings", "organization");

                            b1.WithOwner()
                                .HasForeignKey("TenantBrandingId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.Url", "LogoUrl", b1 =>
                        {
                            b1.Property<Guid>("TenantBrandingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)")
                                .HasColumnName("LogoUrl");

                            b1.HasKey("TenantBrandingId");

                            b1.ToTable("TenantBrandings", "organization");

                            b1.WithOwner()
                                .HasForeignKey("TenantBrandingId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.HexColor", "PrimaryColor", b1 =>
                        {
                            b1.Property<Guid>("TenantBrandingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("PrimaryColor");

                            b1.HasKey("TenantBrandingId");

                            b1.ToTable("TenantBrandings", "organization");

                            b1.WithOwner()
                                .HasForeignKey("TenantBrandingId");
                        });

                    b.OwnsOne("BridgingIT.DevKit.Examples.BookFiesta.SharedKernel.Domain.HexColor", "SecondaryColor", b1 =>
                        {
                            b1.Property<Guid>("TenantBrandingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("SecondaryColor");

                            b1.HasKey("TenantBrandingId");

                            b1.ToTable("TenantBrandings", "organization");

                            b1.WithOwner()
                                .HasForeignKey("TenantBrandingId");
                        });

                    b.Navigation("FaviconUrl")
                        .IsRequired();

                    b.Navigation("LogoUrl")
                        .IsRequired();

                    b.Navigation("PrimaryColor")
                        .IsRequired();

                    b.Navigation("SecondaryColor")
                        .IsRequired();
                });

            modelBuilder.Entity("BridgingIT.DevKit.Examples.BookFiesta.Modules.Organization.Domain.Tenant", b =>
                {
                    b.Navigation("Branding");
                });
#pragma warning restore 612, 618
        }
    }
}
